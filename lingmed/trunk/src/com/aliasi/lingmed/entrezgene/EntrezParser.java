/*
 * LingPipe v. 2.0
 * Copyright (C) 2003-5 Alias-i
 *
 * This program is licensed under the Alias-i Royalty Free License
 * Version 1 WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the Alias-i
 * Royalty Free License Version 1 for more details.
 *
 * You should have received a copy of the Alias-i Royalty Free License
 * Version 1 along with this program; if not, visit
 * http://www.alias-i.com/lingpipe/licenseV1.txt or contact
 * Alias-i, Inc. at 181 North 11th Street, Suite 401, Brooklyn, NY 11211,
 * +1 (718) 290-9170.
 */

package com.aliasi.lingmed.entrezgene;

import com.aliasi.corpus.ObjectHandler;
import com.aliasi.corpus.XMLParser;

import com.aliasi.util.Strings;

import com.aliasi.xml.DelegatingHandler;
import com.aliasi.xml.SAXWriterFilter;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Parser for the XML version of the 
 * <A href="http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene">NCBI Entrez Gene database</A>.
 * The input to this parser is the version of the Entrez Gene database 
 * generated by the NCBI asn2xml utility. 
 * <em>Note that the XML DOCTYPE statement must be deleted from the XML,
 * should be since the current (Jan 2008) NCBI_Entrezgene.dtd
 * causes the SAX parser to exhaust memory</em>.
 * 
 * @author Mitzi Morris
 * @version 1.0
 * @since   LingMed1.0
 */

public class EntrezParser 
    extends XMLParser<ObjectHandler<EntrezGene>> {
    private boolean mSaveXml;

    public EntrezParser() {
	mSaveXml = false;
    }

    public EntrezParser(boolean saveXml) {
	mSaveXml = saveXml;
    }

    public DefaultHandler getXMLHandler() {
	if (mSaveXml) {
	    try {
		return new EntrezSetFilterHandler(getHandler());
	    } catch (IOException ioe) {
	        throw new IllegalStateException(ioe);
	    }
	}
	return new EntrezSetHandler(getHandler());
    }

    static class EntrezSetFilterHandler extends DelegatingHandler {
	ObjectHandler<EntrezGene> mHandler;
	EntrezgeneHandler mEntrezgeneHandler;
	ByteArrayOutputStream mBytesOut = new ByteArrayOutputStream();
	SAXWriterFilter mSaxFilter;

	public EntrezSetFilterHandler(ObjectHandler<EntrezGene> handler) throws IOException {
	    mHandler=handler;
	    mEntrezgeneHandler = new EntrezgeneHandler();
	    // wrap handler in SAXWriterFilter in order to collect raw XML
	    mSaxFilter = new SAXWriterFilter(mBytesOut,Strings.UTF8,mEntrezgeneHandler);
	    setDelegate(EntrezTags.ENTREZGENE_ELT, mSaxFilter);
	}
	
	public void finishDelegate(String qName, DefaultHandler handler) {
	    if (qName.equals(EntrezTags.ENTREZGENE_ELT)) {
		EntrezGene eg = mEntrezgeneHandler.geneEntry();
		try {
		    byte[] rawXmlBytes = mBytesOut.toByteArray();
		    String rawXml = new String(rawXmlBytes,0,rawXmlBytes.length,Strings.UTF8);
		    eg.setXmlString(rawXml);
		} catch (IOException ioe) {
		    throw new IllegalStateException(ioe);
		}
		mHandler.handle(eg);
		mBytesOut.reset();
	    }
	}
    }    

    static class EntrezSetHandler extends DelegatingHandler {
	ObjectHandler<EntrezGene> mHandler;
	EntrezgeneHandler mEntrezgeneHandler;

	public EntrezSetHandler(ObjectHandler<EntrezGene> handler) {
	    mHandler=handler;
	    mEntrezgeneHandler = new EntrezgeneHandler();
	    setDelegate(EntrezTags.ENTREZGENE_ELT, mEntrezgeneHandler);
	}
	
	public void finishDelegate(String qName, DefaultHandler handler) {
	    if (qName.equals(EntrezTags.ENTREZGENE_ELT)) {
		EntrezGene eg = mEntrezgeneHandler.geneEntry();
		mHandler.handle(eg);
	    }
	}
    }    
    
}
