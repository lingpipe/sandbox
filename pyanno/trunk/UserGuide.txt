pyAnno 1.0 USER GUIDE
============================================================

INSTALLATION
------------------------------------------------------------
The installation guide is in Install.txt


LICENSE
------------------------------------------------------------
pyAnno is distributed under the Apache 2.0 license.  See License.txt.


SIMULATED DATA DEMO
------------------------------------------------------------
Simulating ordinal data and fitting using EM for the 
Dawid and Skene multinomial model can be done using:

% python eg_mle_sim.py

This will print out (a) sizing for simulated data, (b) a trace of EM
epoch-by-epoch with log likelihoods, (c) estimated prevalences
compared to simulated parameter and sample prevalence, (d) estimated
accuracies compared to simulated values and sample values, and (e)
estimated categories with simulated cateory indicated.  Here's
what the output should look like:

SIZES
I= 200
J= 5
K= 4
N= 1000

RUNNING EM
  epoch=     0  log likelihood=-1205.1652   diff=     1.#IO
  epoch=     1  log likelihood= -965.8246   diff=     1.#IO
....
  epoch=    86  log likelihood= -945.8426   diff=    0.0011

PREVALENCE ESTIMATES
 k,   sim,  samp,   MLE,  d.sim, d.samp
 0, 0.038, 0.030, 0.048, +0.010, +0.018
 1, 0.326, 0.355, 0.327, +0.001, -0.028
 2, 0.536, 0.515, 0.447, -0.089, -0.068
 3, 0.100, 0.100, 0.178, +0.078, +0.078

ACCURACY ESTIMATES
  j,k1,k2,   sim,  samp,   mle,  d.sim, d.samp
  0, 0, 0, 0.802, 0.667, 0.472, -0.330, -0.195
  0, 0, 1, 0.169, 0.333, 0.424, +0.255, +0.090
  0, 0, 2, 0.023, 0.000, 0.104, +0.081, +0.104
  0, 0, 3, 0.006, 0.000, 0.000, -0.006, +0.000
...
  4, 3, 2, 0.143, 0.200, 0.323, +0.180, +0.123
  4, 3, 3, 0.809, 0.750, 0.647, -0.163, -0.103

CATEGORY ESTIMATES
    0   0: 0.000   1: 0.000   2:*0.996   3: 0.004 
    1   0: 0.000   1:*0.986   2: 0.014   3: 0.000 
...


MODULE pyanno.multinom
------------------------------------------------------------

This module contains estimators and simulators for multinomial models
of data annotation.  For more information on the models, see
Models.txt.

(diff,ll,prev_mle,cat_mle,acc_mle)
pyann.mle(item,  
          anno,
          label,
          init_acc=0.5,
          epsilon=0.001,
          max_epochs=1000)
----------------------------------------
item:        int[N], 0 <= item[n] < I
             list of item identifiers

anno:        int[N], 0 <= anno[n] < J
             list of annotator identifiers

label:       int[N], 0 <= label[n] < K
             list of labels by annotators for items

init_acc:    float[J][K][K] >= 0.0, SUM_k2 init_acc[j][k][k2] = 1.0
             initial accuracy estimate for annotators for EM

epsilon:     float >= 0.0
             minimum log likelihood increase to continue

max_epochs:  int > 0
             maximum numbe of epochs

RETURN: 
diff:        float >= 0.0
             average increase in log likelihood over past 10 epochs

ll:          float <= 0.0
             log likelihood for estimates returned

prev_mle:    float[K] >= 0, SUM_k prev_mle[k] = 1.0
             maximum likelihood estimate of category prevalence

cat_mle:     float[I][K] >=0,  SUM_k cat_mle[i][k] = 1.0
             maximum likelihood estimate of categories

acc_mle:     float[J][K][K] >=0, SUM_k2 acc_mle[i][k][k2] = 1.0
             maximum likelihood estimate of annotator accuracies 

Assuming an annotation task with I items being annotated, J
annotators, K categories, and N annotations.  The parallel arrays
item, anno, and label are such that for each annotation n, annotator
anno[n] supplied category label[n] for item item[n].  

The initial accuracy is to initialize the EM algorithm, with errors
assumed to be uniform.  The epsilon parameter is for how much the log
likelihood estimate has to improve (averaged over the past ten
epochs), in order to terminate the loop.  The maximum number of epochs
limits the maximum number of epochs.

If argument values are illegal, an exception will be raised.
